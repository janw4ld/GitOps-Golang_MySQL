# Default values for go-serve.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: janw4ld/go-serve
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

service:
  port: 9090
  initialLivenessDelay: 35
  initialReadinessDelay: 5

# db and backend common variables are better configured with subchart value
# templating but it's not supported by helm (yet)
# https://github.com/helm/helm/pull/6876#pullrequestreview-482774751
# also see .mysql below before editing any anchored values
global:
  # this value is ignored when dbLocalVolumes.create=true
  storageClass: &storageClass ""

dbSecretName: &dbSecretName db-secret
dbUser: &dbUser go-server
dbPort: &dbPort 34728

dbPrimaryPVCName: &dbPrimaryPVC db-primary-pvc
dbSecondaryPVCName: &dbSecondaryPVC db-secondary-pvc

sealed:
  # sealed values must be either created for the same release namespace or with
  # cluster-wide scope. otherwise, the cluster will fail to decrypt them.
  MYSQL_PASS:
  MYSQL_ROOT_PASSWORD:
  MYSQL_REPLICATION_PASSWORD:

# create hostPath volumes for db deployment
# SHOULDN'T BE USED IN REAL DEPLOYMENTS; using a storage controller like
# Portworx Volume is a better solution for on-cluster storage
dbLocalVolumes:
  create: true
  primaryVolSize: 600Mi
  secondaryVolSize: 1Gi

ingress:
  enabled: true
  className: haproxy
  hosts:
    - host: go-serve.local
      paths:
        - path: /api
          pathType: Exact
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 700m
    memory: 1Gi
  requests:
    cpu: 700m
    memory: 1Gi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  # targetMemoryUtilizationPercentage: 80

# make sure that all the yaml references below are explicitly re-stated in your
# values.yml otherwise, helm will fail to render the templates (but don't worry,
# it will give you nice error messages!)
mysql:
  global:
    storageClass: *storageClass
  nameOverride: db  # not necessary but the default name is not descriptive  
  architecture: replication
  auth:
    database: internship # hardcoded here since it's hardcoded in the server code
    username: *dbUser
    existingSecret: *dbSecretName
  primary:
    service:
      ports:
        mysql: *dbPort
    persistence:
      existingClaim: *dbPrimaryPVC
  secondary:
    replicaCount: 2
    persistence:
      existingClaim: *dbSecondaryPVC
  volumePermissions:
    enabled: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}
